/************************************************************
Copyright (C), 2014-2024, CRIRP.

FileName: 	at91keypad.c
Author: Version : Date: Joe(zhouxiang0532@163.com)
Description: // 驱动程序
1. -------
History: // 历史修改记录
<author> <time> <version > <desc>
Joe		2014/4/10 1.0 build this module for linux (2.6.27)
***********************************************************/
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/interrupt.h>

#include <linux/types.h>
#include <linux/cdev.h>
#include <linux/input.h>
#include <linux/delay.h>

#include <linux/errno.h>
#include <linux/irq.h>
#include <mach/gpio.h>
#include <mach/keypad.h>
#include <mach/hardware.h>
#include <mach/keypad.h>

#include <asm/irq.h>
#include <asm/io.h>
#include <asm/mach-types.h>

#define DEV_NAME    "keypad"

//struct
struct keypad_device
{
    dev_t dev_id;
    struct cdev chrdev;
    spinlock_t lock;
//    struct input_dev *input;
};
struct keypad_device *keypad_dev;   // global variable
int keypad_major = 0;

//static struct class *keypad_class;

static int kp_enable = 1;
static int found = 0; 

/**
 *
 * GPIO KEYPAD 4*8
 */
static int row_gpios[] = {
    AT91_PIN_PB28, AT91_PIN_PB29, AT91_PIN_PB30,
    AT91_PIN_PB31, 
};
static int col_gpios[] = {
    AT91_PIN_PB20, AT91_PIN_PB21, AT91_PIN_PB22, AT91_PIN_PB23, 
    AT91_PIN_PB24, AT91_PIN_PB25, AT91_PIN_PB26, AT91_PIN_PB27,
};

static unsigned char keypad_state[8] = {0};

static int atmel_keymap[] = {	/* KEY(col,row,val) */
    KEY(0, 0, KEY_A),   /* camera Qt::Key_F17 */
    KEY(0, 1, KEY_D),   /* voice memo Qt::Key_F14 */
    KEY(0, 2, KEY_G),   /* voice memo */
    KEY(0, 3, KEY_J),   /* voice memo */
    
    KEY(1, 0, KEY_B),   /* red button Qt::Key_Hangup */
    KEY(1, 1, KEY_E),
    KEY(1, 2, KEY_H),
    KEY(1, 3, KEY_K),

    KEY(2, 0, KEY_C),
    KEY(2, 1, KEY_F),
    KEY(2, 2, KEY_I),
    KEY(2, 3, KEY_L),
    
    KEY(3, 0, KEY_1),   /* joystick press or Qt::Key_Select */
    KEY(3, 1, KEY_4),
    KEY(3, 2, KEY_7),
    KEY(3, 3, KEY_BACKSPACE),

    KEY(4, 0, KEY_2),   
    KEY(4, 1, KEY_5),
    KEY(4, 2, KEY_8),
    KEY(4, 3, KEY_0),
    
    KEY(5, 0, KEY_3),
    KEY(5, 1, KEY_6),
    KEY(5, 2, KEY_9),
    KEY(5, 3, KEY_TAB),

    KEY(6, 0, KEY_F10),
    KEY(6, 1, KEY_F11),
    KEY(6, 2, KEY_F12),
    KEY(6, 3, KEY_ENTER),
    
    KEY(7, 0, KEY_ESC),
    KEY(7, 1, KEY_T),
    KEY(7, 2, KEY_U), 
    KEY(7, 3, KEY_V), 

    0
};

static struct atmel_kp_platform_data atmel_kp_data = {
    .rows   = 4,
    .cols   = 8,
    .keymap = atmel_keymap,
    .keymapsize = ARRAY_SIZE(atmel_keymap),
    .rep    = 1,
    .delay  = 12,
    .col_gpios = col_gpios,
    .row_gpios = row_gpios,
};
/************************************************************/


static void kp_do_tasklet(unsigned long data);
DECLARE_TASKLET(kp_tasklet, kp_do_tasklet, 0);
static DECLARE_WAIT_QUEUE_HEAD(keypad_waitq);//静态的初始化一个等待队列

static void set_col_gpio_val(u8 value)
{
    int col;
    for (col = 0; col < atmel_kp_data.cols; col++)
    {
        if (value & (1 << col))
            at91_set_gpio_output(col_gpios[col], 1);
        else
            at91_set_gpio_output(col_gpios[col], 0);
    }
}

static u8 get_row_gpio_val(void)
{
    int row;
    u8 value = 0;

    for (row = 0; row < atmel_kp_data.rows; row++)
    {
        if (at91_get_gpio_value(row_gpios[row]))
            value |= (1 << row);
    }
    return value;
}

static void atmel_kp_scan_keypad(unsigned char *state)
{
    int col = 0;
    
    /* read the keypad status */
    for (col = 0; col < atmel_kp_data.cols; col++)
    {
        set_col_gpio_val( ~(1 << col));
        state[col] = (~(get_row_gpio_val())) & 0x3f;
    }
    set_col_gpio_val(0);
}

static inline int atmel_kp_find_key(int col, int row)
{
    int i, key;

    key = KEY(col, row, 0);
    for (i = 0; atmel_keymap[i] != 0; i++)
        if ((atmel_keymap[i] & 0xff000000) == key)
            return atmel_keymap[i] & 0x00ffffff;
    return -1;
}

static void kp_do_tasklet(unsigned long data)
{
//    struct atmel_kp *atmel_kp_data = (struct atmel_kp *) data;
    unsigned char new_state[8], changed, key_down = 0;
    int i, col, row;
    int spurious = 0;
 
    if(found == 1)
    {
        found = 0;
        /* check for any changes */
        mdelay(15);	//防抖时间 15ms
        atmel_kp_scan_keypad(new_state);
    
#if 0
        /* check for changes and print those */
        for (col = 0; col < atmel_kp_data->cols; col++)
        {
            changed = new_state[col] ^ keypad_state[col];
            key_down |= new_state[col];

            if (changed == 0)
                continue;
            for (row = 0; row < atmel_kp_data->rows; row++)
            {
                int key;
                if (!(changed & (1 << row)))
                    continue;
                key = atmel_kp_find_key(col, row);
                if (key < 0)
                {
                    printk(KERN_WARNING
                          "atmel-keypad: Spurious key event %d-%d\n",
                           col, row);
                    /* We scan again after a couple of seconds */
                    spurious = 1;
                    continue;
                }
            input_report_key(atmel_kp_data->input, key & ~GROUP_MASK, new_state[col] & (1 << row));
            }
        }

        memcpy(keypad_state, new_state, sizeof(keypad_state));

        if (key_down)
        {
            int delay = HZ / 5;
            /* some key is pressed - keep irq disabled and use timer
             * to poll the keypad */
            if (spurious)
                delay = 2 * HZ;
            mod_timer(&atmel_kp_data->timer, jiffies + delay);
            //printk("Here I am: %s:%i\n", __FILE__, __LINE__);
        }
        else
        {
        /* enable interrupts */
#if 0
            for (i = 0; i < atmel_kp_data->rows; i++)
                enable_irq(row_gpios[i]);
#endif
        }
#endif
    }
}

static irqreturn_t keypad_irq_handler(int irq, void *dev_id)
{
    //printk("Here I am: %s:%i\n", __FILE__, __LINE__);
    spin_lock(&keypad_dev->lock);
    found = 1;
    spin_unlock(&keypad_dev->lock);

    wake_up_interruptible(&keypad_waitq);

    tasklet_schedule(&kp_tasklet);
    return IRQ_HANDLED;
}

static int initializeKeypad(void)
{
    int irq_idx,  col_idx, row_idx,  ret;

    /* Cols: outputs */
    for (col_idx = 0; col_idx < atmel_kp_data.cols; col_idx++)
        at91_set_gpio_output(col_gpios[col_idx], 0);

    /* Rows: inputs */
    for (row_idx = 0; row_idx < atmel_kp_data.rows; row_idx++)
    {
        at91_set_gpio_input(row_gpios[row_idx], 1);
        at91_set_deglitch(row_gpios[row_idx], 1);
    }

    /* scan current status and enable interrupt */
    atmel_kp_scan_keypad(keypad_state);

    for (irq_idx = 0; irq_idx < atmel_kp_data.rows; irq_idx++)
    {
        int irq = gpio_to_irq(row_gpios[irq_idx]);
        set_irq_type(row_gpios[irq_idx], AT91_AIC_SRCTYPE_FALLING);
        if (irq < 0)
        {
            pr_err("atmel-keypad: Unable to get irq number for GPIO %d, error %d\n",
                   row_gpios[irq_idx], irq);
            return -1;
        }

        if (request_irq(irq, keypad_irq_handler, IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,
            DEV_NAME, NULL) < 0)
        {
            printk ("fail to register irq for %d!\n", irq_idx);
            return -1;
        }
    }
    return 0;
}

/*---------------------------------------------------------
//open Function
//---------------------------------------------------------*/
static int keypad_open(struct inode * s_node,struct file * s_file)
{
    printk("Here I am: %s:%i\n", __FILE__, __LINE__);
    try_module_get(THIS_MODULE);
    return 0;
}

/*---------------------------------------------------------
//close Function
//---------------------------------------------------------*/
static int keypad_release(struct inode * s_node,struct file * s_file)
{
    module_put(THIS_MODULE);
    return 0;
}

static int keypad_read(struct file *filp, char __user *buff, size_t count, loff_t *offp)
{
    int ret;

    if(!found)
    {	//当按键没有按下时，读进程挂起，直到按键按下。
        wait_event_interruptible(keypad_waitq, found);
    }
    found = 0;

    printk("keypad interrupt occur\n");
//    ret = copy_to_user(buff, (const void *)key_values, min(sizeof(key_values), count));
//    memset((void __user *)key_values, 0, sizeof(key_values));
//    return ret ? -EFAULT:min(sizeof(key_values), count);

    return 0;
}

struct file_operations keypad_fops = {
    .owner = THIS_MODULE,
    .open  = keypad_open,
    .release = keypad_release,
    .read  = keypad_read,
};

//*********************************************************
//初始化模块函数；
//*********************************************************
static int __init keypad_init(void)
{
    int ret;
    dev_t dev_id = 0;
    struct input_dev *input_dev;
    int i, irq_idx,  col_idx, row_idx;

    if (!atmel_kp_data.rows || !atmel_kp_data.cols || !atmel_kp_data.keymap)
    {
        printk(KERN_ERR "No rows, cols or keymap defined\n");
        return -EINVAL;
    }

    initializeKeypad();

    /* Figure out our device number. */
    if (keypad_major)
    {
        dev_id = MKDEV(keypad_major, 0);
        ret = register_chrdev_region (dev_id, 1, DEV_NAME);
    }
    else
    {
        ret = alloc_chrdev_region (&dev_id, 0, 1, DEV_NAME);
        if (ret)
        {
            printk (KERN_WARNING "KEY_MODULE_NAME: unable to get major %d\n", keypad_major);
            return ret;
        }
        keypad_major = MAJOR (dev_id);
    }

    keypad_dev = kmalloc( sizeof(struct keypad_device), GFP_KERNEL);  // allocate size
    if( !keypad_dev )
    {
        ret = -ENOMEM;
        return ret;
    }
    memset( keypad_dev, 0, sizeof(struct keypad_device) );

    init_waitqueue_head (&keypad_waitq);
    spin_lock_init (&keypad_dev->lock);
    keypad_dev->dev_id = dev_id;

    cdev_init(&keypad_dev->chrdev, &keypad_fops);
    keypad_dev->chrdev.owner = THIS_MODULE;
    keypad_dev->chrdev.ops = &keypad_fops;

    ret = cdev_add(&keypad_dev->chrdev, keypad_dev->dev_id, 1);
    if (ret)
    {
        printk ("fail to register driver for " DEV_NAME "%d!\n", keypad_dev->dev_id);
        return ret;
    }

    //create class
//    keypad_class = class_create (THIS_MODULE, DEV_NAME);
//    device_create(keypad_class, NULL, keypad_dev->dev_id, NULL, DEV_NAME); /* add module to /dev/port */

    return 0;
}

static void __exit keypad_exit(void)
{
    int i;

    cdev_del(&keypad_dev->chrdev);
//    class_destroy(keypad_class);
//    unregister_chrdev_region(MKDEV(keypad_major, 0), 1);

    /* disable keypad interrupt handling */
    tasklet_disable(&kp_tasklet);
    tasklet_kill(&kp_tasklet);

    for (i = 0; i < atmel_kp_data.rows; i++)
    {
        free_irq(row_gpios[i], NULL);
    }

    kfree(keypad_dev);
    unregister_chrdev_region(MKDEV(keypad_major, 0), 1);
    
    printk("%s removed!\n",DEV_NAME);
}


module_init(keypad_init);
module_exit(keypad_exit);

MODULE_DESCRIPTION("Atmel Keypad Driver");
MODULE_LICENSE("GPL");
